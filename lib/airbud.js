// Generated by CoffeeScript 1.7.1
(function() {
  var Airbud, AirbudInstance, fs, request, retry;

  request = require("request");

  fs = require("fs");

  retry = require("retry");

  Airbud = (function() {
    function Airbud() {}

    Airbud.retrieve = function(options, cb) {
      var airbud;
      if (typeof options === "string") {
        options = {
          url: options
        };
      }
      airbud = new AirbudInstance(options);
      return airbud.retrieve(cb);
    };

    Airbud.json = function(options, cb) {
      var airbud;
      if (typeof options === "string") {
        options = {
          url: options
        };
      }
      options.parseJson = true;
      airbud = new AirbudInstance(options);
      return airbud.retrieve(cb);
    };

    return Airbud;

  })();

  AirbudInstance = (function() {
    function AirbudInstance(_arg) {
      var err, _ref;
      _ref = _arg != null ? _arg : {}, this.url = _ref.url, this.operationTimeout = _ref.operationTimeout, this.retries = _ref.retries, this.factor = _ref.factor, this.minInterval = _ref.minInterval, this.maxInterval = _ref.maxInterval, this.randomize = _ref.randomize, this.parseJson = _ref.parseJson, this.expectedKey = _ref.expectedKey, this.expectedStatus = _ref.expectedStatus;
      if (this.url == null) {
        this.url = null;
      }
      if (this.operationTimeout == null) {
        this.operationTimeout = 30000;
      }
      if (this.retries == null) {
        this.retries = 2;
      }
      if (this.factor == null) {
        this.factor = 2;
      }
      if (this.minInterval == null) {
        this.minInterval = 3000;
      }
      if (this.maxInterval == null) {
        this.maxInterval = Infinity;
      }
      if (this.randomize == null) {
        this.randomize = false;
      }
      if (this.parseJson == null) {
        this.parseJson = null;
      }
      if (this.expectedKey == null) {
        this.expectedKey = null;
      }
      if (this.expectedStatus == null) {
        this.expectedStatus = "20x";
      }
      if (!this.url) {
        err = new Error("You did not specify a url to retrieve");
        return cb(err);
      }
      if ((this.expectedStatus != null) && !(this.expectedStatus instanceof RegExp)) {
        if (!(this.expectedStatus instanceof Array)) {
          this.expectedStatus = [this.expectedStatus];
        }
        this.expectedStatus = this.expectedStatus.join("|").replace(/x/g, "\\d");
        this.expectedStatus = new RegExp("^" + this.expectedStatus + "$");
      }
    }

    AirbudInstance.prototype.retrieve = function(cb) {
      var cbOperationTimeout, operation, operationDurations, totalStart;
      operation = retry.operation({
        retries: this.retries,
        factor: this.factor,
        minTimeout: this.minInterval,
        maxTimeout: this.maxInterval,
        randomize: this.randomize
      });
      cbOperationTimeout = null;
      if (this.operationTimeout != null) {
        cbOperationTimeout = {
          timeout: this.operationTimeout,
          cb: function() {
            var err, msg;
            msg = "Operation timeout of " + this.operationTimeout + "ms reached.";
            err = new Error(msg);
            return operation.retry(err);
          }
        };
      }
      totalStart = +(new Date);
      operationDurations = 0;
      return operation.attempt((function(_this) {
        return function(currentAttempt) {
          var operationStart;
          operationStart = +(new Date);
          return _this._execute(function(err, data, res) {
            var info, returnErr, totalDuration;
            operationDurations += +(new Date) - operationStart;
            if (operation.retry(err)) {
              return;
            }
            totalDuration = +(new Date) - totalStart;
            info = {
              statusCode: res != null ? res.statusCode : void 0,
              errors: operation.errors(),
              attempts: operation.attempts(),
              totalDuration: totalDuration,
              operationDuration: operationDurations / operation.attempts()
            };
            returnErr = err ? operation.mainError() : null;
            return cb(returnErr, data, info);
          });
        };
      })(this), cbOperationTimeout);
    };

    AirbudInstance.prototype._execute = function(cb) {
      var path;
      if (this.url.indexOf("file://") === 0) {
        path = this.url.substr(7, this.url.length).split("?")[0];
        fs.readFile(path, "utf8", (function(_this) {
          return function(err, buf) {
            var returnErr;
            if (err) {
              returnErr = new Error("Error while opening " + path + ". " + err.message);
              return cb(returnErr);
            }
            return _this._handleData(buf, {}, cb);
          };
        })(this));
        return;
      }
      return request.get(this.url, (function(_this) {
        return function(err, res, buf) {
          var msg;
          if (err) {
            return cb(err, buf, res);
          }
          if (_this.expectedStatus != null) {
            if (!_this.expectedStatus.test(res.statusCode + "")) {
              msg = "HTTP Status " + res.statusCode + " received when fetching '" + _this.url + "'. ";
              msg += "Expected: " + _this.expectedStatus + ". " + ((buf + "").substr(0, 30)) + "..";
              err = new Error(msg);
              return cb(err, buf, res);
            }
          }
          return _this._handleData(buf, res, cb);
        };
      })(this));
    };

    AirbudInstance.prototype._handleData = function(buf, res, cb) {
      var data, e, err, msg;
      data = buf;
      if (!this.parseJson) {
        return cb(null, data, res);
      }
      try {
        data = JSON.parse(data);
      } catch (_error) {
        e = _error;
        return cb(e, data, res);
      }
      if ((this.expectedKey != null) && (data[this.expectedKey] == null)) {
        msg = "Invalid body received when fetching '" + this.url + "'. \n";
        msg += "No key: " + this.expectedKey + ". " + buf;
        err = new Error(msg);
        return cb(err, data, res);
      }
      return cb(null, data, res);
    };

    return AirbudInstance;

  })();

  module.exports = Airbud;

}).call(this);
