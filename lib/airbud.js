// Generated by CoffeeScript 1.7.1
(function() {
  var Airbud, fs, request, retry;

  request = require("request");

  fs = require("fs");

  retry = require("retry");

  Airbud = (function() {
    function Airbud() {}

    Airbud._defaults = {
      url: null,
      retries: 0,
      timeout: null,
      parseJson: true,
      expectedKey: null,
      testDelay: 0
    };

    Airbud.fetch = function(options, cb) {
      var err, key, operation, operationDurations, timeoutForOperation, totalStart, val, _ref;
      if (!options.url) {
        err = new Error("You did not specify a url to fetch");
        return cb(err);
      }
      _ref = this._defaults;
      for (key in _ref) {
        val = _ref[key];
        if (options[key] == null) {
          options[key] = val;
        }
      }
      operation = retry.operation(options);
      timeoutForOperation = null;
      if (options.timeout != null) {
        timeoutForOperation = {
          timeout: options.timeout,
          cb: function() {
            var msg;
            msg = "Operation timeout of " + options.timeout + "ms reached.";
            err = new Error(msg);
            return operation.retry(err);
          }
        };
      }
      totalStart = +(new Date);
      operationDurations = 0;
      return operation.attempt((function(_this) {
        return function(currentAttempt) {
          var operationStart;
          operationStart = +(new Date);
          return _this._fetch(options, function(err, data) {
            var info, totalDuration;
            operationDurations += +(new Date) - operationStart;
            if (operation.retry(err)) {
              return;
            }
            totalDuration = +(new Date) - totalStart;
            info = {
              errors: operation.errors(),
              attempts: operation.attempts(),
              totalDuration: totalDuration,
              operationDuration: operationDurations / operation.attempts()
            };
            return cb(operation.mainError(), data, info);
          });
        };
      })(this), timeoutForOperation);
    };

    Airbud._fetch = function(options, cb) {
      var path;
      if (options.url.indexOf("file://") === 0) {
        path = options.url.substr(7, options.url.length).split("?")[0];
        setTimeout((function(_this) {
          return function() {
            return fs.readFile(path, "utf8", function(err, buf) {
              var returnErr;
              if (err) {
                returnErr = new Error("Error while opening " + path + ". " + err.message);
                return cb(returnErr);
              }
              return _this._handleData(options, buf, cb);
            });
          };
        })(this), options.testDelay);
        return;
      }
      return request.get(options.url, (function(_this) {
        return function(err, res, buf) {
          var msg;
          if (err) {
            return cb(err, buf);
          }
          if (options.expectedStatus != null) {
            if (options.expectedStatus.indexOf(parseInt(res.statusCode, 10)) === -1) {
              msg = "" + res.statusCode + " received when fetching '" + url + "'. \n expected";
              msg += " one status of: " + (options.expectedStatus.join(', ')) + ". " + buf;
              err = new Error(msg);
              return cb(err);
            }
          }
          return _this._handleData(options, buf, cb);
        };
      })(this));
    };

    Airbud._handleData = function(options, buf, cb) {
      var data, e, err, msg;
      data = buf;
      if (!options.parseJson) {
        return cb(null, data);
      }
      try {
        data = JSON.parse(data);
      } catch (_error) {
        e = _error;
        return cb(e, data);
      }
      if ((options.expectedKey != null) && (data[options.expectedKey] == null)) {
        msg = "Invalid body received when fetching '" + options.url + "'. \n";
        msg += "No key: " + options.expectedKey + ". " + buf;
        err = new Error(msg);
        return cb(err);
      }
      return cb(null, data);
    };

    return Airbud;

  })();

  module.exports = Airbud;

}).call(this);
